name: Qualif
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "master"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  qualif:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1


      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.7.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

      - name: Set KUBE_CONFIG env from kind
        if: steps.list-changed.outputs.changed == 'true'
        id: kube-config
        run: echo "KUBE_CONFIG=$(kind get kubeconfig-path)" >> $GITHUB_ENV

      - name: install project contour
        if: steps.list-changed.outputs.changed == 'true'
        uses: actions-hub/kubectl@master        
        env:
          KUBE_CONFIG: ${{ steps.kube-config.output.KUBE_CONFIG }}
        with:
          args: apply -f https://projectcontour.io/quickstart/contour.yaml

      - name: patch contour daemonsets
        if: steps.list-changed.outputs.changed == 'true'
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ steps.kube-config.output.KUBE_CONFIG }}
        with:
          args: patch daemonsets -n projectcontour envoy -p '{"spec":{"template":{"spec":{"nodeSelector":{"ingress-ready":"true"}}}}}'

      - name: setup chaos mesh
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v2.6.2/install.sh  | bash -s -- --local kind

      - name: setup certs
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
          openssl req -x509 -newkey rsa:4096 -nodes -subj '/CN=example.com' -keyout tls.key -out tls.crt -days 365
          cp tls.crt ca.crt
          kubectl create secret generic custom-cert --from-file=./tls.crt --from-file=./tls.key --from-file=./ca.crt

      - name: deploy symas openldap
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
          cd "$GITHUB_WORKSPACE"
          helm install openldap -f .bin/myval.yaml .
          kubectl rollout status sts openldap

      - name: verify deployment
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to openldap database"
           sudo apt-get install -y ldap-utils
           LDAPTLS_REQCERT=never ldapsearch -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'dc=example,dc=org'

      - name: test phpldapadmin access
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to phpldapadmin"
           echo "127.0.0.1 phpldapadmin.example ssl-ldap2.example" | sudo tee -a /etc/hosts
           curl phpldapadmin.example:8080

      - name: test self service pwd access
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to ssp"
           curl ssl-ldap2.example:8080

      - name: verify certs
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "verify certificate"
           openssl s_client -showcerts -connect localhost:30636 </dev/null | grep "issuer=CN = example.com"

      - name: apply chaos tests
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to openldap database"
           kubectl apply -f .bin/chaos.yaml

      - name: test write
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to openldap database"
           LDAPTLS_REQCERT=never ldapadd -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -f  .bin/user.ldif
           LDAPTLS_REQCERT=never ldapsearch -o nettimeout=20 -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'dc=example,dc=org' > /tmp/test-write.txt
           if [ $(grep "numResponses" /tmp/test-write.txt | cut -d ":" -f 2 | tr -d ' ') -ne 5 ]; then exit 1 ; fi
           if ! grep -q "objectClass: ownCloud" /tmp/test-write.txt; then  echo exit 1; fi

      - name: chaos tests
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to openldap database"
           for i in {1..20}; do  LDAPTLS_REQCERT=never ldapsearch -o nettimeout=20 -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'dc=example,dc=org' && sleep 60 ; done

      - name: deploy openldap-single-node
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
          helm delete openldap
          cd "$GITHUB_WORKSPACE"
          helm install openldap -n single --create-namespace -f .bin/singleNode.yaml .
          kubectl rollout status sts openldap -n single

      - name: verify single node deployment
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
           echo "test access to openldap database"
           sudo apt-get install -y ldap-utils
           LDAPTLS_REQCERT=never ldapsearch -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'dc=example,dc=org' > /tmp/test-single-node.txt
           cat /tmp/test-single-node.txt
           if [ $(grep "numResponses" /tmp/test-single-node.txt | cut -d ":" -f 2 | tr -d ' ') -ne 6 ]; then exit 1 ; fi
