name: Qualif
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "main"
      - "master"
jobs:
  qualif:
      runs-on: ubuntu-latest
      steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Lint
        shell: bash
        run: |
          cd openldap
          helm dependency update .
          helm lint .
      - name: setup cluster
        shell: bash
        run: |
          curl -Lo /tmp/kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x /tmp/kind
          /tmp/kind create cluster --config=$GITHUB_WORKSPACE/.bin/kind-conf.yml --image=kindest/node:v1.28.0@sha256:9f3ff58f19dcf1a0611d11e8ac989fdb30a28f40f236f59f0bea31fb956ccf5c
          kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
          kubectl patch daemonsets -n projectcontour envoy -p '{"spec":{"template":{"spec":{"nodeSelector":{"ingress-ready":"true"},"tolerations":[{"key":"node-role.kubernetes.io/control-plane","operator":"Equal","effect":"NoSchedule"},{"key":"node-role.kubernetes.io/master","operator":"Equal","effect":"NoSchedule"}]}}}}'
      - name: create namespace
        shell: bash
        run: |
          kubectl create namespace ds
      - name: setup certs
        shell: bash
        run: |
          openssl req -x509 -newkey rsa:4096 -nodes -subj '/CN=example.com' -keyout tls.key -out tls.crt -days 365
          cp tls.crt ca.crt
          kubectl  --namespace ds create secret generic custom-cert --from-file=./tls.crt --from-file=./tls.key --from-file=./ca.crt
      - name: deploy openldap
        shell: bash
        run: |
          cd "$GITHUB_WORKSPACE"
          helm install --namespace ds openldap -f .bin/myval.yaml openldap
          kubectl --namespace ds get events --watch &
          kubectl --namespace ds rollout status sts openldap; ec=$?
          kubectl --namespace ds logs -l app.kubernetes.io/name=openldap --all-containers=true --timestamps=true --prefix=true --since=6h --tail=-1 --ignore-errors
          exit $ec
      - name: verify deployment
        shell: bash
        run: |
           sudo apt-get install -y ldap-utils
           LDAPTLS_REQCERT=never ldapsearch -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'dc=example,dc=org'
      - name: verify certs
        shell: bash
        run: |
           openssl s_client -showcerts -connect localhost:30636 </dev/null | grep "issuer=CN = example.com"
      - name: setup chaos mesh
        shell: bash
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v2.6.2/install.sh  | bash -s -- --local kind
      - name: apply chaos tests
        shell: bash
        run: |
           kubectl apply -f .bin/chaos.yaml
      - name: run a few basic tests against the openldap cluster
        run: $GITHUB_WORKSPACE/.bin/tests.sh -d 100
      - name: chaos tests
        shell: bash
        run: |
           cd "$GITHUB_WORKSPACE"
           for i in {1..10}; do
               LDAPTLS_REQCERT=never ldapsearch -o nettimeout=20 -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'cn=Jean Dupond,dc=example,dc=org' | awk -f .bin/ldif2json | jq . - && sleep 47
           done
      - name: test phpldapadmin access
        shell: bash
        run: |
           echo "127.0.0.1 phpldapadmin.example ssl-ldap2.example" | sudo tee -a /etc/hosts
           curl phpldapadmin.example:8080
      - name: test self service pwd access
        shell: bash
        run: |
           curl ssl-ldap2.example:8080
      - name: deploy openldap-single-node
        shell: bash
        run: |
          cd "$GITHUB_WORKSPACE"
          helm delete --namespace ds openldap
          helm install openldap -n single --create-namespace -f .bin/singleNode.yaml openldap
          kubectl --namespace single get events --watch &
          kubectl --namespace single rollout status sts openldap; ec=$?
          kubectl --namespace single logs -l app.kubernetes.io/name=openldap --all-containers=true --timestamps=true --prefix=true --since=6h --tail=-1 --ignore-errors
          exit $ec
      # - name: verify single node deployment
      #   shell: bash
      #   run: |
      #      sudo apt-get install -y ldap-utils
      #      LDAPTLS_REQCERT=never ldapsearch -x -D 'cn=admin,dc=example,dc=org' -w Not@SecurePassw0rd -H ldaps://localhost:30636 -b 'dc=example,dc=org' > /tmp/test-single-node.txt
      #      cat /tmp/test-single-node.txt
      #      if [ $(grep "numResponses" /tmp/test-single-node.txt | cut -d ":" -f 2 | tr -d ' ') -ne 7 ]; then exit 1 ; fi
      - name: remove single node deployment
        shell: bash
        run: |
          helm delete -n single openldap
