---
# Source: automatic-webhook-certificates/templates/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: automatic-webhook-certificates-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
spec:
  privileged: false
  # Allow core volume types.
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'downwardAPI'
  - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Permits the container to run with root privileges as well.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    # Forbid adding the root group.
    - min: 0
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    # Forbid adding the root group.
    - min: 0
      max: 65535
  readOnlyRootFilesystem: false
---
# Source: automatic-webhook-certificates/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  automatic-webhook-certificates-admission
  namespace: ds
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission
---
# Source: automatic-webhook-certificates/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name:  automatic-webhook-certificates-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - get
  - update

- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - automatic-webhook-certificates-admission
---
# Source: automatic-webhook-certificates/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  automatic-webhook-certificates-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: automatic-webhook-certificates-admission
subjects:
- kind: ServiceAccount
  name: automatic-webhook-certificates-admission
  namespace: ds
---
# Source: automatic-webhook-certificates/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  automatic-webhook-certificates-admission
  namespace: ds
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
---
# Source: automatic-webhook-certificates/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name:  automatic-webhook-certificates-admission
  namespace: ds
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: automatic-webhook-certificates-admission
subjects:
- kind: ServiceAccount
  name: automatic-webhook-certificates-admission
  namespace: ds
---
# Source: automatic-webhook-certificates/templates/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  automatic-webhook-certificates-admission-create
  namespace: ds
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission-create
spec:
  template:
    metadata:
      name:  automatic-webhook-certificates-admission-create
      labels:
        app: automatic-webhook-certificates-admission-create
    spec:
      containers:
      - name: create
        image: jettech/kube-webhook-certgen:v1.5.2
        imagePullPolicy: IfNotPresent
        args:
        - create
        - --host=,.ds.svc
        - --namespace=ds
        - --secret-name=webhooksecret
      restartPolicy: OnFailure
      serviceAccountName: automatic-webhook-certificates-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: automatic-webhook-certificates/templates/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:  automatic-webhook-certificates-admission-patch
  namespace: ds
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: automatic-webhook-certificates-admission-patch
spec:
  template:
    metadata:
      name:  automatic-webhook-certificates-admission-patch
      labels:
        app: automatic-webhook-certificates-admission-patch
    spec:
      containers:
      - name: patch
        image: jettech/kube-webhook-certgen:v1.5.2
        imagePullPolicy: IfNotPresent
        args:
        - patch
        - --webhook-name=
        - --namespace=ds
        - --secret-name=webhooksecret
        - --patch-failure-policy=Fail
        - --patch-mutating=false
        - --patch-validating=true
        - --log-level=info
      restartPolicy: OnFailure
      serviceAccountName: automatic-webhook-certificates-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
